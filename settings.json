{
  "$schema": "https://json.schemastore.org/claude-code-settings.json",
  "cleanupPeriodDays": 30,
  "env": {
    "BASH_DEFAULT_TIMEOUT_MS": "600000",
    "BASH_MAX_TIMEOUT_MS": "600000",
    "CLAUDE_BASH_MAINTAIN_PROJECT_WORKING_DIR": "true",
    "CLAUDE_LANGUAGE": "ja"
  },
  "includeCoAuthoredBy": false,
  "permissions": {
    "allow": [
      "Bash(*)",
      "Edit(**)",
      "Glob(**)",
      "GlobTool(**)",
      "Grep(**)",
      "GrepTool(**)",
      "LS(**)",
      "MultiEdit(**)",
      "Read(**)",
      "TodoRead()",
      "TodoWrite(**)",
      "WebFetch(domain:*)",
      "WebSearch(**)",
      "Write(**)",
      "Bash(pnpm lint:*)",
      "mcp__playwright__browser_navigate",
      "mcp__playwright__browser_click",
      "mcp__playwright__browser_select_option",
      "mcp__playwright__browser_snapshot",
      "mcp__playwright__browser_console_messages",
      "mcp__ide__executeCode",
      "Bash(pnpm test:*)",
      "Bash(pnpm run lint:*)",
      "Bash(pnpm run:*)",
      "Bash(hostname:*)",
      "Bash(ss:*)",
      "Bash(npx tsc:*)",
      "Bash(chmod:*)",
      "Bash(find:*)",
      "Bash(grep:*)",
      "mcp__playwright__browser_resize",
      "mcp__playwright__browser_take_screenshot",
      "mcp__ide__getDiagnostics",
      "mcp__playwright__browser_type",
      "Bash(npx vitest run:*)",
      "Bash(mkdir:*)",
      "Bash(node:*)",
      "Bash(pnpm exec biome format:*)",
      "Bash(pnpm add:*)",
      "Bash(cat:*)",
      "Bash(ls:*)",
      "mcp__serena",
      "mcp__playwright"
    ],
    "deny": [
      "Bash(* | bash)",
      "Bash(* | sh)",
      "Bash(:(){ :|:& };:)",
      "Bash(> /dev/sda*)",
      "Bash(apt-get install*)",
      "Bash(brew install*)",
      "Bash(bundle install*)",
      "Bash(chmod -R 777*)",
      "Bash(chmod 777*)",
      "Bash(chown -R*)",
      "Bash(dd*)",
      "Bash(format*)",
      "Bash(gem install*)",
      "Bash(gh api --method DELETE*)",
      "Bash(gh auth logout*)",
      "Bash(gh auth refresh*)",
      "Bash(gh gist create*)",
      "Bash(gh gist delete*)",
      "Bash(gh gpg-key add*)",
      "Bash(gh gpg-key delete*)",
      "Bash(gh release create*)",
      "Bash(gh release delete*)",
      "Bash(gh release upload*)",
      "Bash(gh repo archive*)",
      "Bash(gh repo clone*)",
      "Bash(gh repo create*)",
      "Bash(gh repo delete*)",
      "Bash(gh repo deploy-key*)",
      "Bash(gh repo edit*)",
      "Bash(gh repo fork*)",
      "Bash(gh repo rename*)",
      "Bash(gh repo sync*)",
      "Bash(gh repo unarchive*)",
      "Bash(gh secret delete*)",
      "Bash(gh secret set*)",
      "Bash(gh ssh-key add*)",
      "Bash(gh ssh-key delete*)",
      "Bash(gh workflow disable*)",
      "Bash(gh workflow enable*)",
      "Bash(gh workflow run:*)",
      "Bash(git checkout*)",
      "Bash(git config*)",
      "Bash(git rebase*)",
      "Bash(git reset --hard*)",
      "Bash(git restore*)",
      "Bash(mkfs*)",
      "Bash(npm install -g*)",
      "Bash(pip install*)",
      "Bash(rm -rf ../*)",
      "Bash(rm -rf /)",
      "Bash(rm -rf /*)",
      "Bash(rm -rf ~/*)",
      "Bash(sudo*)",
      "Bash(yum install*)",
      "Bash(sudo:*)",
      "Bash(rm:*)",
      "Bash(rm -rf:*)",
      "Bash(git push:*)",
      "Bash(git commit:*)",
      "Bash(git reset:*)",
      "Bash(git rebase:*)",
      "Read(.env.*)",
      "Read(.credentials.*)",
      "Read(id_rsa)",
      "Read(id_ed25519)",
      "Read(**/*token*)",
      "Read(**/*key*)",
      "Write(.env*)",
      "Write(**/secrets/**)",
      "Bash(curl:*)",
      "Bash(wget:*)",
      "Bash(nc:*)",
      "Bash(npm uninstall:*)",
      "Bash(npm remove:*)",
      "Bash(psql:*)",
      "Bash(mysql:*)",
      "Bash(mongod:*)",
      "mcp__supabase__execute_sql"
    ]
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": ["playwright"],
  "hooks": {
    "PreToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "~/.claude/scripts/deny-check.sh"
          },
          {
            "type": "command",
            "command": "~/.claude/scripts/check-ai-commit.sh"
          }
        ]
      }
    ],
    "Stop": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "powershell.exe -Command \"New-BurntToastNotification -Text 'Claude Code', 'タスクが完了しました'\""
          }
        ]
      }
    ]
  },
  "statusLine": {
    "type": "command",
    "command": "~/.claude/scripts/statusline.js"
  },
  "feedbackSurveyState": {
    "lastShownTime": 1754094978642
  }
}
